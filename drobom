#!/usr/bin/python


import sys
import Drobo
import time
import getopt
import string
from posix import getuid

toprint = [ "config", "capacity", "protocol", "settings", "slots", "firmware", "status", "options", "luns" ]

def usage():
   print "\nUsage: drobom [options] <command> [ arguments... ] \n"
   print " drobo management interface, version: %s\n" % Drobo.VERSION
   print "options may be one of: "
   print " -c, --command <command>\tcommand to run."
   print " -d, --device <device>\tpick a specific disk, rather than scan"
   print " -h, --help \t\tprint this help text"
   print " -v, --verbose <debug_code>\t bit-field, default is 0 (off) "
   print "\t1 - General, 2 - Hardware Dialog, 4 - Initiation, 8 - DMP layer, 16- Detection"
   print "\t63 will print everything...\n"
   print "\t128 turns on simulation mode...\n"
   print " -V, --version\treport version of drobo-utils."
   print "\ncommand is one of: "
   print "\tblink\tidentify the drobo by making the lights blink"
   print "\tdiag\tdump diagnostics file into /tmp directory"
   print "\tfwcheck\tquery drobo.com for updates to firmware for the given Drobo"
   print "\tfwload\tload a specific firmware for the given Drobo. Arguments:"
   print "\t\t<fwimage>\tthe firmware file to load."
   print "\tfwupgrade\tupgrade the firmware to the latest and greatest, recommended by DRI"
   print "\tinfo <options>\tprint information on a Drobo"
   print "\t\t<options>\tcomma separated list of: %s" % ','.join(toprint)
   print "\tlist \tshow device files for all Drobos found."
   print "\tname <name> \tSet Drobo name"
   print "\tsettime\tsync Drobo's clock to UTC"
   print "\tsetlunsize\tSet the size of LUNS on device. Arguments:"
   print "\t\t<sz>\tinteger number of TiB to set the lunsize to"
   print "\t\t<confirmation>\tSpecify 'PleaseEraseMyData' if you really mean it"
   print "\t\tNote: After execution, Drobo reboots, wait a few minutes before accessing again"
   print "\tshutdown\tshutdown drobo (DRI calls this 'standby' ... umount first!)"
   print "\tstatus\treport how is the Drobo doing"
   print "\tview\tstart up a management dashboard GUI"


def printconfig(d):
  config=d.GetSubPageConfig()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query config result: '
    print config
    print 'max lun size is: ', config[2]
    print
  else:
    print config

def printcapacity(d):
  c=d.GetSubPageCapacity()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query capacity result:'
    print c
    print 'Physical space... used: ',  c[1] , ' free: ' , c[0],  ' Total: ', c[2]
    print
  else:
    print c


def printprotocol(d):
  protocol=d.GetSubPageProtocol()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query protocol version result: '
    print protocol 
    print
  else:
    print protocol

def printsettings(d):
  settings=d.GetSubPageSettings()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query settings result:' 
    print settings
    print 'Drobo time is', time.ctime(settings[0])
    print
  else:
    print settings
  
def printslots(d):
  slotinfo=d.GetSubPageSlotInfo()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query slotinfo result:  number of slots:'
    print slotinfo[0]
    print slotinfo[1]
    print slotinfo[2]
    print slotinfo[3]
    print
  else:
    print slotinfo
  
def printfirmware(d):
  firmware=d.GetSubPageFirmware()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query firmware result:' 
    print firmware
    print 'drobo says firmware revision: ', str(firmware[0]), '.', str(firmware[1]), '(', str(firmware[2]), ') was built: ', firmware[5]
    print
  else:
    print firmware
  
def printstatus(d):
  status=d.GetSubPageStatus()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query status result:' 
    print status
    print
  else:
    print status
  
def printoptions(d):
  options=d.GetSubPageOptions()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query options result:'
    print options
    print
  else:
    print options
  
def printluns(d):
  luninfo=d.GetSubPageLUNs()
  if Drobo.DEBUG & Drobo.DBG_Chatty:
    print 'query luninfo result:'
    for i in luninfo:
       print i
    print
  else:
    for i in luninfo:
       print i
 
def info(d,choices):
  if debug & Drobo.DBG_Chatty:
    print '---------------------------------------------------------'
    print 'Info about Drobo ' + d.char_dev_file
    print '---------------------------------------------------------'

  for c in choices:
     eval( "print" + c + "(d)"  )

  if debug & Drobo.DBG_Chatty:
    print '---------------------------------------------------------'


# Mainline...

if len(sys.argv) == 1:
  usage()
  sys.exit()

d=None
cmd=None
#default is chatty
debug=1

try:
        opts, args = getopt.getopt(sys.argv[1:], \
            "c:d:hv:V", \
            ["command=", "device=", "help", "verbosity=", "version"])
except getopt.GetoptError, err:
        usage()
        sys.exit(2)

for o, a in opts:
        if o in ("-c", "--command"):
	    cmd = a
        elif o in ("-d", "--device"):
            try:
              d=Drobo.Drobo( [ a ], debugflags=debug)
            except:
              print "failed to open %s as a drobo" % a
              if getuid() != 0:
                print"I see you are not root... probably just permissions .. try again as root."
              sys.exit()
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-v", "--verbosity", "--verbose") :
            debug = int(a)
        elif o in ("-V", "--version" ):
            print Drobo.VERSION
            sys.exit()
        else:
            assert False, "unhandled option"

if cmd==None :
  if len(args) == 0:
     usage()
     sys.exit()
  cmd=args[0]

if d == None:
  l=Drobo.DiscoverLUNs(debugflags=debug)
  if cmd == 'list':

     print ' '.join(map(lambda x: ':'.join(x) , l ))

     if ( getuid() != 0 ) and (len(l) < 1):
        print 'probably should try again as root'
     sys.exit()
  elif len(l) > 1:
     print "More than one Drobo connected, please pick one: " + str(l) 
     sys.exit()
  elif len(l) < 1:
     if getuid() != 0:
       print "No Drobo found: try again using root."
     else:
       print "No Drobo discovered, is one connected?"
     sys.exit()
  else:
     d = Drobo.Drobo( l[0], debugflags=debug )

#assert d is a valid drobo object...


if cmd == "blink":
   d.Blink() 
   
elif cmd == "diag":
   f=d.dumpDiagnostics()
   print "diagnostics in ", f

elif cmd == 'fwcheck':
   tuple=d.PickLatestFirmware()
   print tuple[3]

elif cmd == 'fwload':
   if d.PickFirmware(args[1]):
     d.writeFirmware(update)
     d.Sync()

elif cmd == 'fwupgrade':
   if d.updateFirmwareRepository():
     d.writeFirmware(update)
     d.Sync()

elif cmd == 'info':
   if len(args) > 1:
     toprint=args[1].split(',')
   info(d,toprint)

elif cmd == "name": 
  d.Sync(args[1])          

elif cmd == "setlunsize": 
   lunsize=int(args[1])

   if lunsize > 16 or lunsize < 1:
        print 'lun size needs to be between 1 and 16 TiB, %d is invalid' % lunsize
        sys.exit()
 
   if lunsize != 8 and lunsize != 8 and lunsize != 4 and lunsize != 2 and lunsize != 1:
        print 'lun size needs to be a power of 2 TiB, %d is invalid' % lunsize
        sys.exit()

   if args[2] == 'PleaseEraseMyData':
        print 'You asked nicely, so I will set the lunsize to %d as you requested' % lunsize
        d.SetLunSize(lunsize)
        print 'Done... Drobo is likely now rebooting.  In a few minutes, it will come back with the new LUN size.'
   else:
        print 'This is guaranteed to erase your disk, so you must say: PleaseEraseMyData'

elif cmd == "settime": 
  d.Sync()          

elif cmd == "shutdown":
   d.Standby() 
   
elif cmd == "status":
   c=d.GetSubPageCapacity()
   if c[2] > 0 :
      pfull = 100 * ((c[1]+1.0)/c[2])
      print "%s %02d%% full - %s" % ( ':'.join(d.char_devs), pfull, d.GetSubPageStatus() )
   else:
      print "firmware too old to report capacity properly... or the drobo is empty..."

elif cmd == "time":
  settings=d.GetSubPageSettings()
  print "Drobo says it is:", time.ctime(settings[0])

elif cmd == "view":
  import sys,subprocess
  from PyQt4 import QtGui
  from PyQt4 import QtCore
  from DroboGUI import DroboGUI

  # fire up a GUI for the given LUN, stays foreground...
  app = QtGui.QApplication(sys.argv)
  tb = DroboGUI(d)
  tb.show()
  app.exec_()

else:
  usage()
  print "Unknown Command: ", cmd
